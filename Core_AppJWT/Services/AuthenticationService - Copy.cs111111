using Core_AppJWT.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace Core_AppJWT.Services
{
    /// <summary>
    /// The followint class is used for the following
    /// 1. The class will accept Login Details and then Issue the token based on the login Status
    /// 
    /// </summary>
    public class AuthenticationService
    {
        IConfiguration configuration;
        SignInManager<IdentityUser> signInManager;
        UserManager<IdentityUser> userManager;
        public AuthenticationService(IConfiguration configuration, 
            SignInManager<IdentityUser> signInManager,
            UserManager<IdentityUser> userManager)
        {
            this.configuration = configuration;
            this.signInManager = signInManager;
            this.userManager = userManager;
        }

        public string RegisterUser(RegisterUser register)
        {
            string jwtToken = "";
            var registerUser = new IdentityUser() { UserName = register.Email,Email= register.Email };
            var result =  userManager.CreateAsync(registerUser,register.Password).Result;
            if (result.Succeeded)
            {
                 signInManager.SignInAsync(registerUser,isPersistent:false).Wait();
                jwtToken = GenerateToken(registerUser);
            }
            return jwtToken;
        }
        public string Authenticate(LoginUser inputModel)
        {
            string jwtToken = "";
            var loginUser = new IdentityUser() { UserName = inputModel.UserName };

            var result =  signInManager.PasswordSignInAsync(inputModel.UserName, inputModel.Password,
                isPersistent:false, lockoutOnFailure: false).Result;
            if (result.Succeeded)
            {
                jwtToken = GenerateToken(loginUser);
            }
            return jwtToken;
        }

        private string GenerateToken(IdentityUser identityUser)
        {
            string jwtToken = "";
            // Read the secret key and the expiration from the configuration 
            var secretKey = Convert.FromBase64String(configuration["JWTSettings:SecretKey"]);
            var expiryTimeSpan = Convert.ToInt32(configuration["JWTSettings:ExpityInMinuts"]);
            // logic to get the user role
            // get the user object based on Email
            IdentityUser user = new IdentityUser(identityUser.UserName);
            // get roles for the user
            var roles = userManager.GetRolesAsync(user).Result;
            // set the expity, subject, etc.
            // note that Issuer and Audience will be null because 
            // there is no third-party issuer
            var securityTokenDescription = new SecurityTokenDescriptor()
            {
                Issuer = null,
                Audience = null,
                Subject = new ClaimsIdentity(new List<Claim> {
                        new Claim("username",user.Id,ToString())
                    }),
                Expires = DateTime.UtcNow.AddMinutes(expiryTimeSpan),
                IssuedAt = DateTime.UtcNow,
                NotBefore = DateTime.UtcNow,
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(secretKey), SecurityAlgorithms.HmacSha256Signature)
            };
            // Now generate token using JwtSecurityTokenHandler
            var jwtHandler = new JwtSecurityTokenHandler();
            var jwToken = jwtHandler.CreateJwtSecurityToken(securityTokenDescription);
            jwtToken = jwtHandler.WriteToken(jwToken);
            return jwtToken;
        }
    }
}
